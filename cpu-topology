#!/usr/bin/env ruby

# This script will pretty print cpu core and cache information.
# 
# 
# TODO: make sure all file reads are in exception blocks.
# TODO: package and release

require 'rubygems'
require 'optparse'
require 'json' 
require 'pp'


class SysObject

  def initialize( path ) 
    raise "path in constructor is invalid" unless File.exists? path   
    Dir.foreach( path ) do |f|
      next if f == '.' or f == '..'
      File.open( "#{path}/#{f}", 'r') do |line|
        next if File.directory? line
        l = line.gets
        instance_variable_set("@#{f.to_s}",l.chomp)
        self.class.send( :attr_accessor, f )
      end
    end 
  end 

  def pretty_print( printer )
    self.instance_variables.each do |iv|
      printer.text "\t\t"
      printer.text "#{iv}: #{instance_variable_get(iv)}\n" 
    end
  end

end 


def parse_options
  options = {}
  optparse = OptionParser.new do|opts|
    opts.banner = "Usage: cpu-topology [options] "
    options[:json] = false
    opts.on( '-j', '--json', 'Display all information in json format' ) do
      options[:json] = true
    end
    opts.on( '-h', '--help', 'Display this screen' ) do
      puts opts
      exit
    end
  end
  begin
    optparse.parse!
  rescue OptionParser::InvalidOption => e
    puts e
    puts optparse 
    exit 1
  end
  options
end

##class CacheLevel
#
#  attr_accessor :values
#
#  def initialize(path) 
#    @values = Hash.new
#    Dir.foreach(path) do |d|
#      next if d == "." or d == ".." 
#      File.open(path + "/" + d, "r") do |f|
#        p = f.gets.chomp
#	      @values[d]  = p
#      end
#    end
#  end 
#
#  def print
#    level = @values['level']
#    size  = @values['size']
#    shared= @values['shared_cpu_list']
#    type  = @values['type']
#    type  = "Instruc" if type == "Instruction"
#    puts "\t\tlevel:  #{level}  size:  #{size}\ttype:\t#{type}\t\tshared cores:\t#{shared}"
#  end
#
#end 

#class Cache
#
#  attr_accessor :levels
#  attr_accessor :cpu
#
#  def initialize(path)
#    @levels = Array.new
#    Dir.foreach(path) do |d|
#      next if d == "." or d == ".."
#      @levels << Cache_level.new( path + d )
#    end
#    @cpu = path.split('/')[5].sub(/u(\d)$/,'u0\1')
#  end
#
#  # lets create a nice printing method
#  def print
#    puts "Cache  object " + @cpu
#    @levels.each do |l|
#      l.print
#    end
#  end
#
#end 

#def find_mem_node path
#  Dir.foreach(path) do |f|
#    if f =~ /^node(\d*)$/
#      return $1
#    end
#  end
#  puts "This machine is not NUMA enabled, so please don't use the -a or -n command line options"
#  exit 1   
#end

# print the physical view of things
def print_physical_view
  puts "\nEach physical CPU has the following cores:"
  puts "ChipN\t\tList of cores"
  puts "============================="
  @physcpu.sort.each do |elem|
    puts "chip#{elem[0]}\t=>\t#{elem[1].join(",")}"
  end
end 

# memory nodes that are being used by each core
def print_node_view
  puts "\nMemory node view (list of cores that share cache):"
  puts "nodeN\t\tList of cpus sharing node"
  puts "========================================="
  @memnode.sort.each do |e|
    puts "node#{e[0]}\t=>\t#{e[1].join(",")}"
  end 
end 


# print the cache view of things
def print_cache_view
  puts "\nA caches view of the cpus"
  @cachedata.sort.each do |e|
    e[1].print
  end
end

# print cpu view of things
# lists of each core and thier "brother" cores
def print_cpu_view
  puts "\nEach core has the following cores also on the same die:"
  puts "CoreN\t\tClosest cores"
  puts "============================="
  @brothers.sort.each do |e|
    puts "core#{e[0]}\t=>\t#{e[1]}"
  end
end

# print...
def print_results 
  puts "The following details have been extracted from the /sys filesystem:\n"
  print_physical_view if @options[:all] or @options[:physical] 
  print_cpu_view if @options[:all] or @options[:cores] 
  print_node_view if @options[:all] or @options[:node] 
  print_cache_view if @options[:all] or @options[:cache] 
end


def check_setup
  mounts = '/proc/mounts'
  default = ""
  File.open( mounts, 'r' ).each do |f|
    sysfs = f.grep(/sysfs/).map { |x| x.split(" ")[1] }
    default = "#{sysfs}/devices/system/cpu/" unless sysfs.empty?
  end
  default
end

def get_all_cpu_data( path )
  cpu = {}
  cpu_count = 0
  while cpu_count < @cpus do
    cpu_location   = "#{path}cpu#{cpu_count}/topology/"
    cache_location = "#{path}cpu#{cpu_count}/cache/"
    cpu["cpu#{cpu_count}".to_sym] = {}
    cpu["cpu#{cpu_count}".to_sym][:topology]  = SysObject.new( cpu_location ) 
    cpu["cpu#{cpu_count}".to_sym][:cache]     = get_all_cache_data( cache_location ) 
    cpu_count += 1 
  end
  cpu
end 

def get_all_cache_data(  path ) 
  cache = {}
  cache_count = 0
  while cache_count < @cache_levels do 
    location = "#{path}index#{cache_count}/"
    cache["index#{cache_count}".to_sym] = SysObject.new( location ) 
    cache_count += 1  
  end
  cache
end

def get_num_cpus_cache( path, search )
  count = 0
  Dir.foreach( path ) do |d| 
    count += 1 if d =~ /^#{search}\d+/
  end
  count
end

def main()

  opts = parse_options 

  @sys_path = check_setup
  @cpus = get_num_cpus_cache( @sys_path, "cpu" ) 
  @cache_levels = get_num_cpus_cache( "#{@sys_path}cpu0/cache", "index" )
  
  cpu_details = get_all_cpu_data( @sys_path ) 

  pp cpu_details
end

main if __FILE__ == $0
